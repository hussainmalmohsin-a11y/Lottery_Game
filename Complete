package LotteryGame;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

public class LotteryGame {
    private static final int INITIAL_JACKPOT = 10000000;
    private static final int JACKPOT_INCREMENT = 2000000;
    
    private static final int NUMBER_OF_PICKS = 5;
    private static final int RANGE = 69;
    
    private int jackpot;
    private int totalWinnings;
    
    private int totalMatches;
    private int gamesPlayed;
    
    public LotteryGame() {
        this.jackpot = INITIAL_JACKPOT;
        this.totalWinnings = 0;
        this.totalMatches = 0;
        this.gamesPlayed = 0;
    }
    
    public int[] generateComputerNumbers() {
        Random random = new Random();
        Set<Integer> numbers = new HashSet<>();
        while (numbers.size() < NUMBER_OF_PICKS) {
            numbers.add(random.nextInt(RANGE) + 1);
        }
        return numbers.stream().mapToInt(Number::intValue).toArray();
    }
    
    public int[] getPlayerNumbers(Scanner scanner) {
        Set<Integer> playerNumbers = new HashSet<>();
        System.out.println("Enter 5 unique numbers between 1 and 69:");
        while (playerNumbers.size() < NUMBER_OF_PICKS) {
            try {
                int num = scanner.nextInt();
                if (num < 1 || num > RANGE || playerNumbers.contains(num)) {
                    System.out.println("Invalid or duplicate number. Try again.");
                } else {
                    playerNumbers.add(num);
                }
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter an integer.");
                scanner.next();
            }
        }
        return playerNumbers.stream().mapToInt(Number::intValue).toArray();
    }
    public int checkMatches(int[] playerNumbers, int[] computerNumbers) {
        Set<Integer> computerSet = new HashSet<>();
        for (int num : computerNumbers) {
            computerSet.add(num);
        }
        int matches = 0;
        for (int num : playerNumbers) {
            if (computerSet.contains(num)) {
                matches++;
            }
        }
        return matches;
    }
    
    public void printCurrentGameResults(int[] playerNumbers, int[] computerNumbers, int matches, int winnings) {
        System.out.println("Player's numbers: " + arrayToString(playerNumbers));
        System.out.println("Computer's numbers: " + arrayToString(computerNumbers));
        System.out.println("Numbers matched: " + matches);
        System.out.println("Winnings this game: $" + winnings);
    }
                                                                                                                                                                                                                                                                                                                    //*****
    public void printFinalResults() {
        System.out.println("\nFinal Results:");
        System.out.println("Total games played: " + gamesPlayed);
        System.out.println("Total numbers matched: " + totalMatches);
        System.out.println("Total winnings: $" + totalWinnings);
        System.out.println("Final jackpot value: $" + jackpot);
    }
    public String arrayToString(int[] array) {
        StringBuilder sb = new StringBuilder();
        for (int num : array) {
            sb.append(num).append(" ");
        }
        return sb.toString().trim();
    }
    public void play() {
        Scanner scanner = new Scanner(System.in);
        boolean playAgain = true;
        while (playAgain) {
            int[] computerNumbers = generateComputerNumbers();
            int[] playerNumbers = getPlayerNumbers(scanner);
            int matches = checkMatches(playerNumbers, computerNumbers);
            int winnings = matches * 100;
            if (matches == NUMBER_OF_PICKS) {
                winnings = jackpot;
                jackpot = INITIAL_JACKPOT;
            } else {
                jackpot += JACKPOT_INCREMENT;
            }
            totalWinnings += winnings;
            totalMatches += matches;
            gamesPlayed++;
            printCurrentGameResults(playerNumbers, computerNumbers, matches, winnings);
            
            System.out.println("Do you want to play again? (yes/no)");
            String response = scanner.next();
            playAgain = response.equalsIgnoreCase("yes");
        }
        printFinalResults();
        scanner.close();
    }
    public static void main(String[] args) {
        LotteryGame lotteryGame = new LotteryGame();
        lotteryGame.play();
    }
}
